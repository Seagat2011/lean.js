<!DOCTYPE html>
<html lang="en">
<!--
TITLE: 
    LEAN.htm

AUTHOR: Seagat2011 
    http://eterna.cmu.edu/web/player/90270/
    http://fold.it/port/user/1992490

VERSION: 
    Major.Minor.Release.Build 
    1.0.0.0
    - Inception
    - Added LEAN output to console
    1.0.0.1
    - Eliminated LEAN output to console
    - Added LEAN Source Editor
    - Added LEAN Ouput Window

STYLEGUIDE: 
    http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
    
REFERENCES:
    N/A

DESCRIPTION: 
    Demonstrates LEAN.js APIs

INPUT: 
     import data.nat
     open nat
     definition m_plus_n ( m n : nat ) : nat := m + n
     print m_plus_n
     eval m_plus_n 3 6

OUTPUT:
     N => N => N, Add
     9
    
SCRIPT TYPE: 
    Lightweight Solver
    
BUGFIX:
    SYMP: LEAN.js -- error : expected function := []
    SOLU: Module.postRun type-redefinition : new Object() => new Array()
-->
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
<link rel='stylesheet' media='all' href='simple-lean-js-example.css'>
</head>
<body onload='loader()'>
<p>
<br>Small example using lean.js, by Nathan Carter , 7/31/15,
<br>&amp; Michelle Antonello, 8/31/15. 
<br>Using information learned from Soonho Kong's LEAN Tutorial app.
<br>
<br><div class=cssScroll>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18</div><textarea id=srcCode style="float:inline"class=cssCode placeholder='Enter keyword then press translate button below to translate'></textarea>
<br>
<br><input id=btnTranslate type=button value='click to translate' onclick='translatorTool()'/>
<br>
<br><textarea id=srcTranslated class=cssTranslated placeholder='Author - Abdul H. Shabazz, Copyright (c) 2015 - All Rights Reserved'></textarea>
</p>
</body>
<footer>

<script type="text/javascript" charset="utf-8">
var file_name = 'test.lean'
function clear_all(){
   srcTranslated.value = ''
}
function clear(){
  var w = 
  [
  "-------------------------------------------",
  "---------------- S E T U P ----------------",
  "-------------------------------------------",
  "Loading LEAN VM...",
  "  ..LEAN VM loaded.",
  "Running LEAN VM...",
  "  ..LEAN VM complete.",
  "Ready.",
  ]
  srcTranslated.value = w.join('\n')
}
function preview(e){
  srcTranslated.value += '\n'+e
}
/*
 * Utilities for timing things.
 */
var myTimer = null;
function now () { return (new Date()).getTime(); }
function startTimer () { myTimer = now(); }
function checkTimer () { return '(took ' + (now() - myTimer) + 'ms)'; }
/*
 * "Module" must be initialized before the <script> tag for lean.js.
 * The LEAN.js script populates Module with compiled LEAN code,
 * but it needs to know about the parameters below or it will throw errors.
 */
clear_all()
preview( '-------------------------------------------' )
preview( '---------------- S E T U P ----------------' )
preview( '-------------------------------------------' )
preview( 'Loading LEAN VM...' ); startTimer()
Module = { }
Module.TOTAL_MEMORY = 64 << 20
Module.noExitRuntime = true
var myLeanOutputTracker = null
Module.print = function ( text ) {
    var match = null
    if ( match = /FLYCHECK_BEGIN (.*)/.exec( text ) ) {
        myLeanOutputTracker = { type : match[1], text : [ ] }
    } else if ( !myLeanOutputTracker ) {
        throw new Error( 'Unexpected output from LEAN: ' + text )
    } else if ( match = /([^:]+):(\d+):(\d+): (.*)/.exec( text ) ) {
        myLeanOutputTracker.file = match[1]
        myLeanOutputTracker.line = match[2]
        myLeanOutputTracker.char = match[3]
        myLeanOutputTracker.info = match[4]
    } else if ( /FLYCHECK_END/.test( text ) ) {
        preview( 'LEAN output: '
                   + JSON.stringify( myLeanOutputTracker, 1, 1 ) )
        myLeanOutputTracker = null
    } else {
        myLeanOutputTracker.text.push( text )
    }
}
Module.preRun = [
    function () {
        preview( '  ..LEAN VM loaded.', checkTimer() )
        preview( 'Running LEAN VM...' ); startTimer()
    },
]
Module.postRun = [ /* BUGFIX */
    function () {
       preview( '  ..LEAN VM enabled.\nReady.', checkTimer() )
    },
]
</script>

<!-- Import the Lean JavaScript module generated by emscripten. -->
<!-- <script src="https://leanprover.github.io/lean.js/lean.js" type="text/javascript" charset="utf-8"></script>-->
<script src="lean.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" charset="utf-8">
function loader(){
    if(!srcCode.value){
        srcCode.value = "import data.nat\nopen nat\ndefinition m_plus_n ( m n : nat ) : nat := m + n\nprint m_plus_n\neval m_plus_n 3 6"
    }
}
function translatorTool(){
    /*
     * Initialize the lean.js module.
     */
    clear()
    preview( 'Calling lean_init()...' ); startTimer()
    Module.lean_init()
    preview( '  ..lean_init() complete.', checkTimer() )
    /*
     * Import the Lean standard module.
     */
    preview( 'Importing LEAN standard module...' ); startTimer()
    Module.lean_import_module( "standard" )
    preview( '  ..Standard module imported.', checkTimer() )
    /*
     * Save an example .lean file into the virtual filesystem.
     */
    preview( '-------------------------------------------' )
    preview( '-------------- R U N N I N G --------------' )
    preview( '-------------------------------------------' )
    preview( 'Loading source into file test.lean and Writing file to virtual FS...' ); startTimer()
    testfile = srcCode.value
    preview( "..." )
    FS.writeFile( file_name, testfile, { encoding: 'utf8' } )
    preview( '  ..test.lean file written.', checkTimer() )
    /*
     * Run Lean on the above file.
     */
    preview( 'Running LEAN on test.lean...' ); startTimer()
    Module.lean_process_file( 'test.lean' )
    preview( 'End Process.', checkTimer() )
}
</script>
</footer>
</html>